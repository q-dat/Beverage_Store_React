import React, { ReactNode, ElementType } from 'react';
import { IComponentBaseProps, ComponentColor, ComponentShape, ComponentSize } from '../types';
type ITagProps = {
    a: {
        attr: React.AnchorHTMLAttributes<HTMLAnchorElement>;
        ele: HTMLAnchorElement;
    };
    button: {
        attr: React.ButtonHTMLAttributes<HTMLButtonElement>;
        ele: HTMLButtonElement;
    };
    div: {
        attr: React.HTMLAttributes<HTMLDivElement>;
        ele: HTMLDivElement;
    };
    img: {
        attr: React.ImgHTMLAttributes<HTMLImageElement>;
        ele: HTMLImageElement;
    };
    input: {
        attr: React.InputHTMLAttributes<HTMLInputElement>;
        ele: HTMLInputElement;
    };
    label: {
        attr: React.LabelHTMLAttributes<HTMLLabelElement>;
        ele: HTMLLabelElement;
    };
    span: {
        attr: React.HTMLAttributes<HTMLSpanElement>;
        ele: HTMLSpanElement;
    };
};
type GetTagProps<T extends ElementType> = T extends keyof ITagProps ? ITagProps[T] : ITagProps['button'];
export type ButtonProps<T extends ElementType = 'button', A extends React.HTMLAttributes<HTMLElement> = GetTagProps<T>['attr']> = Omit<A, 'color' | 'size'> & IComponentBaseProps & {
    shape?: ComponentShape;
    size?: ComponentSize;
    variant?: 'outline' | 'link';
    color?: ComponentColor;
    glass?: boolean;
    wide?: boolean;
    fullWidth?: boolean;
    responsive?: boolean;
    animation?: boolean;
    loading?: boolean;
    active?: boolean;
    startIcon?: ReactNode;
    endIcon?: ReactNode;
    disabled?: boolean;
    tag?: T;
};
declare const _default: <T extends React.ElementType<any> = "button", E extends HTMLElement = GetTagProps<T>["ele"], A extends React.HTMLAttributes<HTMLElement> = GetTagProps<T>["attr"]>(props: Omit<A, "color" | "size"> & IComponentBaseProps & {
    shape?: "circle" | "square" | undefined;
    size?: "lg" | "md" | "sm" | "xs" | undefined;
    variant?: "link" | "outline" | undefined;
    color?: "neutral" | "primary" | "secondary" | "accent" | "ghost" | "info" | "success" | "warning" | "error" | undefined;
    glass?: boolean | undefined;
    wide?: boolean | undefined;
    fullWidth?: boolean | undefined;
    responsive?: boolean | undefined;
    animation?: boolean | undefined;
    loading?: boolean | undefined;
    active?: boolean | undefined;
    startIcon?: React.ReactNode;
    endIcon?: React.ReactNode;
    disabled?: boolean | undefined;
    tag?: T | undefined;
} & {
    ref?: React.Ref<E> | undefined;
}) => JSX.Element;
export default _default;
